-- Reference implementation of the `List::disposeWith` function.
-- Unlike `List::dispose`, this function applies additional disposing
-- of the stored elements.
-- NOTE: the `headDisposer` is also disposed as a part of this function.
-- @type List(a), Fn(a -> ()) -> ()
fn disposeWith list headDisposer =
	-- store tail to enable tail-recursive call
	let tail = List::List:tail(list),

	do(
		-- dispose list head
		headDisposer(List::List:head(list)),
		
		-- shallow free (only the list pointer, not its elements)
		Memory::deAlloc(list),

		-- recursive call on the rest of the list
		ifElse(
			List::isEmpty(list),
			-- reached the end of the list - dispose closure
			Fn::dispose(headDisposer),
			disposeWith(tail, headDisposer)
		)
	).
